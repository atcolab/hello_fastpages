{
  
    
        "post0": {
            "title": "Title",
            "content": "Flower Classification using Vision Transformer . The data used in this notebook can be found on Kaggle. Look for Flower Classification with TPUs on Kaggle. . About . Using ViT so classify 104 different flower species . Front Matter . # &quot;Flower Classification using ViT&quot; &gt; &quot;Classifying 104 different flower species using ViT&quot; - toc:true- branch: master - badges: true - comments: false - author: atcolab - categories: [fastpages, jupyter] . import os import pandas as pd import numpy as np import warnings warnings.filterwarnings(&#39;ignore&#39;) import matplotlib.pyplot as plt from pylab import rcParams from tqdm.notebook import tqdm import cv2 import albumentations as A from albumentations.pytorch.transforms import ToTensorV2 from apex import amp import timm from sklearn import model_selection from sklearn import metrics import torch import torch.nn as nn import torch.nn.functional as F import torch.optim as optim from torch.optim import Adam, SGD, AdamW from torch.utils.data import Dataset, DataLoader from torch.optim.lr_scheduler import CosineAnnealingLR, ReduceLROnPlateau, CyclicLR from torch.utils.data.sampler import SubsetRandomSampler, RandomSampler, SequentialSampler from torch.utils.data import DataLoader, Dataset train_path = &#39;./input/jpeg-224x224/train&#39; print(&#39;Number of Classes: &#39;, len(os.listdir(train_path))) model = timm.create_model(&#39;vit_base_patch16_224&#39;, pretrained=True) . Number of Classes: 104 . df = pd.read_csv(&#39;train.csv&#39;) df.head() . id class . 0 train/hard-leaved pocket orchid/11376.jpeg | 1 | . 1 train/hard-leaved pocket orchid/7037.jpeg | 1 | . 2 train/hard-leaved pocket orchid/8890.jpeg | 1 | . 3 train/hard-leaved pocket orchid/11168.jpeg | 1 | . 4 train/hard-leaved pocket orchid/7658.jpeg | 1 | . class FlowerDataset(Dataset): def __init__(self, df, labels, transforms=None): self.df = df self.labels = labels self.transforms = transforms def __len__(self): return len(self.df) def __getitem__(self, index): image_id = self.df[&#39;id&#39;].values[index] image_path = f&#39;./input/jpeg-224x224/{image_id}&#39; image = cv2.imread(image_path, cv2.IMREAD_COLOR) image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) labels = self.labels.values[index] if self.transforms: augmented = self.transforms(image=image) image = augmented[&#39;image&#39;] image = image.astype(np.float32) image /= 255.0 image = image.transpose(2, 0, 1) return torch.tensor(image), torch.tensor(labels) . transforms_train = A.Compose([ A.HorizontalFlip(p=0.5), A.VerticalFlip(p=0.5), A.ShiftScaleRotate(shift_limit=0.0625, scale_limit=0.2, rotate_limit=15, p=0.9, border_mode=cv2.BORDER_REFLECT) ]) transforms_valid = A.Compose([ ]) . train_ds = FlowerDataset(df[:1000], df[:1000][&#39;class&#39;],transforms=transforms_train) def show_images(ds): rcParams[&#39;figure.figsize&#39;] = 20, 10 for i in range(2): f, axarr = plt.subplots(1, 5) for p in range(5): idx = np.random.randint(0, len(ds)) img, label = ds[idx] axarr[p].imshow(img.transpose(0,1).transpose(1, 2)) show_images(train_ds) . class VisionTransformer(nn.Module): def __init__(self, model=model): super(VisionTransformer, self).__init__() self.base_model = model self.base_model.head = nn.Linear(768, 104) def forward(self, x): x = self.base_model(x) return x . def train_fn(model, loader, optimizer, loss_fn, device): model.train() avg_train_loss = 0.0 train_accuracy = 0.0 preds = [] labels = [] for step, (data, targets) in enumerate(loader): data = data.to(device, dtype=torch.float) targets = targets.to(device, dtype=torch.long) optimizer.zero_grad() outputs = model(data) loss = loss_fn(outputs, targets) avg_train_loss += loss.item() / len(loader) with amp.scale_loss(loss, optimizer) as scaled_loss: scaled_loss.backward() if ((step + 1) % 1 == 0) or ((step + 1) == len(loader)): optimizer.step() preds.append(outputs.argmax(1).detach().cpu().numpy()) labels.append(targets.detach().cpu().numpy()) preds = np.concatenate(preds) labels = np.concatenate(labels) train_accuracy = metrics.accuracy_score(preds, labels) return avg_train_loss, train_accuracy def valid_fn(model, loader, loss_fn, device): model.eval() avg_val_loss = 0.0 val_accuracy = 0.0 preds = [] labels = [] with torch.no_grad(): for step, (data, targets) in enumerate(loader): data = data.to(device, dtype=torch.float) targets = targets.to(device, dtype=torch.long) outputs = model(data) loss = loss_fn(outputs, targets) avg_val_loss += loss.item() / len(loader) preds.append(outputs.argmax(1).detach().cpu().numpy()) labels.append(targets.detach().cpu().numpy()) preds = np.concatenate(preds) labels = np.concatenate(labels) val_accuracy = metrics.accuracy_score(preds, labels) return avg_val_loss, val_accuracy . skf = model_selection.StratifiedKFold(4, shuffle=True, random_state=42) folds = df.copy() folds[&#39;fold&#39;] = -1 for i, (train_idx, valid_idx) in enumerate(skf.split(folds, folds[&#39;class&#39;])): folds.loc[valid_idx, &#39;fold&#39;] = i folds.head() . id class fold . 0 train/hard-leaved pocket orchid/11376.jpeg | 1 | 1 | . 1 train/hard-leaved pocket orchid/7037.jpeg | 1 | 2 | . 2 train/hard-leaved pocket orchid/8890.jpeg | 1 | 0 | . 3 train/hard-leaved pocket orchid/11168.jpeg | 1 | 3 | . 4 train/hard-leaved pocket orchid/7658.jpeg | 1 | 1 | . for fold in range(1): N_FOLDS = 1 print(f&quot;Fold: {fold+1} / {N_FOLDS}&quot;) train_idx = np.where((folds[&#39;fold&#39;] != fold))[0] valid_idx = np.where((folds[&#39;fold&#39;] == fold))[0] df_this = folds.loc[train_idx] df_valid = folds.loc[valid_idx] train_ds = FlowerDataset(df_this, df_this[&#39;class&#39;], transforms_train) valid_ds = FlowerDataset(df_valid, df_valid[&#39;class&#39;],transforms_valid) train_loader = torch.utils.data.DataLoader( train_ds, batch_size=64, shuffle=True, num_workers=4, drop_last=True ) valid_loader = torch.utils.data.DataLoader( valid_ds, batch_size=64, shuffle=False, num_workers=4, drop_last=False ) NUM_EPOCHS = 10 device = torch.device(&#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39;) model = VisionTransformer().to(device) optimizer = optim.Adam(model.parameters(), lr=3e-4) model, optimizer = amp.initialize(model, optimizer, opt_level=&quot;O1&quot;) scheduler = CosineAnnealingLR(optimizer, NUM_EPOCHS) loss_fn = nn.CrossEntropyLoss() NUM_EPOCHS = 10 loss_history = { &quot;train&quot;: [], &quot;valid&quot;: [] } acc_history = { &quot;train&quot;: [], &quot;valid&quot;: [] } for epoch in range(NUM_EPOCHS): running_train_loss, train_accuracy = train_fn(model=model, loader=train_loader, optimizer=optimizer, loss_fn=loss_fn, device=device) scheduler.step(epoch-1) loss_history[&#39;train&#39;].append(running_train_loss) acc_history[&#39;train&#39;].append(train_accuracy) running_val_loss, val_accuracy = valid_fn(model=model, loader=valid_loader, loss_fn=loss_fn, device=device) loss_history[&#39;valid&#39;].append(running_val_loss) acc_history[&#39;valid&#39;].append(val_accuracy) print(f&quot;Epoch: {epoch+1} | lr: {optimizer.param_groups[0][&#39;lr&#39;]:.7f} | train loss: {running_train_loss:.2f} | valid loss: {running_val_loss:.2f} | train accuracy: {train_accuracy:.2f} | valid accuracy: {val_accuracy:.2f}&quot;) . Fold: 1 / 1 Selected optimization level O1: Insert automatic casts around Pytorch functions and Tensor methods. Defaults for this optimization level are: enabled : True opt_level : O1 cast_model_type : None patch_torch_functions : True keep_batchnorm_fp32 : None master_weights : None loss_scale : dynamic Processing user overrides (additional kwargs that are not None)... After processing overrides, optimization options are: enabled : True opt_level : O1 cast_model_type : None patch_torch_functions : True keep_batchnorm_fp32 : None master_weights : None loss_scale : dynamic Warning: multi_tensor_applier fused unscale kernel is unavailable, possibly because apex was installed without --cuda_ext --cpp_ext. Using Python fallback. Original ImportError was: ModuleNotFoundError(&#34;No module named &#39;amp_C&#39;&#34;,) Epoch: 1 | lr: 0.0002927 | train loss: 0.92 | valid loss: 0.38 | train accuracy: 0.81 | valid accuracy: 0.91 Epoch: 2 | lr: 0.0003000 | train loss: 0.28 | valid loss: 0.35 | train accuracy: 0.93 | valid accuracy: 0.91 Epoch: 3 | lr: 0.0002927 | train loss: 0.21 | valid loss: 0.34 | train accuracy: 0.94 | valid accuracy: 0.92 Epoch: 4 | lr: 0.0002714 | train loss: 0.13 | valid loss: 0.38 | train accuracy: 0.96 | valid accuracy: 0.91 Epoch: 5 | lr: 0.0002382 | train loss: 0.10 | valid loss: 0.37 | train accuracy: 0.97 | valid accuracy: 0.91 Epoch: 6 | lr: 0.0001964 | train loss: 0.09 | valid loss: 0.39 | train accuracy: 0.97 | valid accuracy: 0.90 Epoch: 7 | lr: 0.0001500 | train loss: 0.05 | valid loss: 0.30 | train accuracy: 0.99 | valid accuracy: 0.93 Epoch: 8 | lr: 0.0001036 | train loss: 0.02 | valid loss: 0.32 | train accuracy: 1.00 | valid accuracy: 0.93 Epoch: 9 | lr: 0.0000618 | train loss: 0.01 | valid loss: 0.26 | train accuracy: 1.00 | valid accuracy: 0.94 Epoch: 10 | lr: 0.0000286 | train loss: 0.01 | valid loss: 0.25 | train accuracy: 1.00 | valid accuracy: 0.94 . rcParams[&#39;figure.figsize&#39;] = 15, 5 plt.title(&quot;Train-Val Loss&quot;) plt.plot(range(1,NUM_EPOCHS+1),loss_history[&quot;train&quot;],&#39;-o&#39;,label=&quot;train&quot;) plt.plot(range(1,NUM_EPOCHS+1),loss_history[&quot;valid&quot;],&#39;-o&#39;,label=&quot;val&quot;) plt.ylabel(&quot;Loss&quot;) plt.xlabel(&quot;Training Epochs&quot;) plt.legend() plt.show() plt.title(&quot;Accuracy Train-Val Score&quot;) plt.plot(range(1,NUM_EPOCHS+1),acc_history[&quot;train&quot;],&#39;-o&#39;,label=&quot;train&quot;) plt.plot(range(1,NUM_EPOCHS+1),acc_history[&quot;valid&quot;],&#39;-o&#39;,label=&quot;val&quot;) plt.ylabel(&quot;Score&quot;) plt.xlabel(&quot;Training Epochs&quot;) plt.legend() plt.show() .",
            "url": "https://atcolab.github.io/hello_fastpages/2021/01/02/flower-ViT.html",
            "relUrl": "/2021/01/02/flower-ViT.html",
            "date": " • Jan 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "MNIST Basics",
            "content": "Reading in the mnist.csv file using pandas . Front Matter . # &quot;MNIST Basics&quot; &gt; &quot;A brief look into MNIST&quot; - toc:true- branch: master - badges: true - comments: false - author: atcolab - categories: [fastpages, jupyter] . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . Testing the #hide_input function... You shouldn&#39;t see the code that produced this output... . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt import matplotlib.pyplot as plt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . mnist_train = pd.read_csv(&#39;../input/mnist/train.csv&#39;) . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . Let&#39;s print the shape of our train.csv file . our ouput is (42000, 785) this means we have 42000 rows and 785 columns | . print(mnist_train.shape) . (42000, 785) . . Let&#39;s print the first five rows of our dataframe . mnist_train.head() . . label pixel0 pixel1 pixel2 pixel3 pixel4 pixel5 pixel6 pixel7 pixel8 ... pixel774 pixel775 pixel776 pixel777 pixel778 pixel779 pixel780 pixel781 pixel782 pixel783 . 0 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 3 4 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 5 rows × 785 columns . Let&#39;s extract the label column and create a target variable to hold the label column. Because we only extracted the label column our target variable should hold one column with all 42000 rows. . target = mnist_train[&#39;label&#39;].astype(int) print(target.shape) . . (42000,) . Let&#39;s create an images variable to hold all of our pixel values from pixel0 to pixel783. Before this we need to drop the label column from our mnist_train dataframe. Let&#39;s print the first five rows of our new images dataframe. . images = mnist_train.drop(&#39;label&#39;, axis=1) images.head() . . pixel0 pixel1 pixel2 pixel3 pixel4 pixel5 pixel6 pixel7 pixel8 pixel9 ... pixel774 pixel775 pixel776 pixel777 pixel778 pixel779 pixel780 pixel781 pixel782 pixel783 . 0 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 3 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 5 rows × 784 columns . Let&#39;s print the shape of our new images dataframe. Because we only dropped the labels column our new dataframe is now size (42000, 784). We simply dropped one column so 785 -&gt; 784. . images_np = images.to_numpy() images_np.shape . . (42000, 784) . In order to plot an image of a number from our dataframe we first need to reshape it. We&#39;re reminded that the mnist dataset contains pixel values of the numbers 0-9. The width and height of the images are 28x28. That is why we have 784 columns because if you were to multiply 28x28 we would get 784. . The code below reshape our images dataframe so that (42000, 784) -&gt; (42000, 28, 28). We can confirm this by printing its shape. . images_np_reshape = images_np.reshape(-1, 28, 28) print(images_np_reshape.shape) . . (42000, 28, 28) . Nows lets grab the first number in our dataframe which is 1. Look at the original mnist dataframe and check the label value for the first row. Since we reshaped our dataframe instead of 784 we get (28, 28). . images_np_reshape[0].shape . . (28, 28) . We use plt.imshow to plot our number The parameter cmap=&#39;gray&#39; just turns our image into black and white. . plt.imshow(images_np_reshape[0], cmap=&#39;gray&#39;) . . &lt;matplotlib.image.AxesImage at 0x120815b90&gt; . Without cmap=&#39;gray&#39; we would get something like this. . plt.imshow(images_np_reshape[0]) . . &lt;matplotlib.image.AxesImage at 0x1223d2f90&gt; .",
            "url": "https://atcolab.github.io/hello_fastpages/2021/01/01/mnist-basics.html",
            "relUrl": "/2021/01/01/mnist-basics.html",
            "date": " • Jan 1, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://atcolab.github.io/hello_fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://atcolab.github.io/hello_fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://atcolab.github.io/hello_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://atcolab.github.io/hello_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}